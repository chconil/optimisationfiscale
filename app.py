import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.subplots as sp
from calculs import OptimisationRemunerationSARL

def main():
    st.set_page_config(
        page_title="Optimisation Fiscale SARL + Holding",
        page_icon="üí∞",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üéØ Optimisation Fiscale SARL + Holding")
    st.markdown("---")
    
    # Sidebar pour la configuration
    with st.sidebar:
        st.header("üîß Configuration")
        
        # Param√®tres de base
        st.subheader("üìä Param√®tres de base")
        resultat_initial = st.number_input(
            "R√©sultat avant r√©mun√©ration (‚Ç¨)",
            min_value=0,
            value=300000,
            step=10000,
            help="R√©sultat de votre SARL avant d√©duction de la r√©mun√©ration de g√©rance"
        )
        
        charges_existantes = st.number_input(
            "Charges existantes (‚Ç¨)",
            min_value=0,
            value=50000,
            step=5000,
            help="Autres charges d√©j√† d√©duites du r√©sultat"
        )
        
        parts_fiscales = st.number_input(
            "Nombre de parts fiscales",
            min_value=1.0,
            value=1.0,
            step=0.5,
            help="Votre nombre de parts fiscales pour le calcul de l'IR"
        )
        
        # Optimisations fiscales
        st.subheader("üéØ Optimisations Fiscales")
        
        st.markdown("**Cochez les optimisations que vous souhaitez activer :**")
        
        # PER
        use_per = st.checkbox(
            "üìà Plan d'√âpargne Retraite (PER)",
            help="D√©duction fiscale sur le revenu imposable (max 32,419‚Ç¨ en 2024)"
        )
        per_max = 0
        if use_per:
            per_max = st.slider(
                "Montant PER maximum (‚Ç¨)",
                min_value=0,
                max_value=50000,
                value=32419,
                step=1000,
                help="Plafond l√©gal : 8 x PASS = 32,419‚Ç¨ en 2024"
            )
        
        # Madelin
        use_madelin = st.checkbox(
            "üè• Contrat Madelin TNS",
            help="D√©duction fiscale compl√©mentaire pour les TNS (max 84,000‚Ç¨ en 2024)"
        )
        madelin_max = 0
        if use_madelin:
            madelin_max = st.slider(
                "Montant Madelin maximum (‚Ç¨)",
                min_value=0,
                max_value=100000,
                value=84000,
                step=5000,
                help="Plafond l√©gal pour les contrats Madelin TNS"
            )
        
        # Girardin
        use_girardin = st.checkbox(
            "üè≠ Girardin Industriel",
            help="‚ö†Ô∏è ATTENTION : Il s'agit d'une D√âPENSE qui g√©n√®re une r√©duction d'imp√¥t"
        )
        girardin_max = 0
        if use_girardin:
            st.warning("‚ö†Ô∏è Le Girardin Industriel n√©cessite un INVESTISSEMENT r√©el. C'est une d√©pense qui g√©n√®re une r√©duction d'imp√¥t.")
            girardin_max = st.slider(
                "Montant d'investissement Girardin (‚Ç¨)",
                min_value=0,
                max_value=100000,
                value=50000,
                step=5000,
                help="Montant de l'investissement (d√©pense) qui g√©n√®re la r√©duction d'imp√¥t"
            )
        
        # Param√®tres de calcul
        st.subheader("‚öôÔ∏è Param√®tres de calcul")
        pas_calcul = st.selectbox(
            "Pr√©cision du calcul",
            options=[1000, 2500, 5000, 10000],
            index=1,
            help="Plus le pas est petit, plus le calcul est pr√©cis mais plus long"
        )
        
        # Bouton de calcul
        if st.button("üöÄ Calculer l'optimisation", type="primary"):
            st.session_state.run_calculation = True
    
    # Zone principale
    if 'run_calculation' not in st.session_state:
        st.session_state.run_calculation = False
    
    if st.session_state.run_calculation:
        # Initialisation de l'optimiseur
        with st.spinner("üîÑ Calcul en cours..."):
            optimiseur = OptimisationRemunerationSARL(
                resultat_avant_remuneration=resultat_initial,
                charges_existantes=charges_existantes,
                parts_fiscales=parts_fiscales
            )
            
            # Optimisation avec niches fiscales
            meilleur_global, tous_scenarios_niches = optimiseur.optimiser_avec_niches(
                pas=pas_calcul,
                per_max=per_max if use_per else 0,
                madelin_max=madelin_max if use_madelin else 0,
                girardin_max=girardin_max if use_girardin else 0
            )
            
            # Forcer l'utilisation des optimisations coch√©es par l'utilisateur
            meilleur_avec_niches = None
            for strategie in tous_scenarios_niches:
                opt = strategie['optimisations']
                # V√©rifier si cette strat√©gie correspond aux choix de l'utilisateur
                per_match = (opt['per'] > 0) == use_per
                madelin_match = (opt['madelin'] > 0) == use_madelin  
                girardin_match = (opt['girardin'] > 0) == use_girardin
                
                if per_match and madelin_match and girardin_match:
                    if meilleur_avec_niches is None or strategie['meilleur']['total_net'] > meilleur_avec_niches['total_net']:
                        meilleur_avec_niches = strategie['meilleur']
            
            # Si aucune strat√©gie ne correspond, utiliser la meilleure globale
            if meilleur_avec_niches is None:
                meilleur_avec_niches = meilleur_global
            
            # Optimisation classique pour comparaison
            meilleur_classique, scenarios_classiques = optimiseur.optimiser(pas=pas_calcul)
        
        # Affichage des r√©sultats
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üèÜ R√©sultat Optimal")
            
            # M√©triques principales
            st.metric(
                "üí∞ Total Net Optimal",
                f"{meilleur_avec_niches['total_net']:,.0f}‚Ç¨",
                delta=f"+{meilleur_avec_niches['total_net'] - meilleur_classique['total_net']:,.0f}‚Ç¨"
            )
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.metric(
                    "üíº R√©mun√©ration Optimale",
                    f"{meilleur_avec_niches['remuneration_brute']:,.0f}‚Ç¨"
                )
            with col_b:
                st.metric(
                    "üìâ Taux Pr√©l√®vement",
                    f"{meilleur_avec_niches['taux_prelevement_global']:.1f}%"
                )
            
            # D√©tail des optimisations
            if any(meilleur_avec_niches['optimisations'][k] > 0 for k in ['per', 'madelin', 'girardin']):
                st.subheader("üéØ Optimisations Utilis√©es")
                
                if meilleur_avec_niches['optimisations']['per'] > 0:
                    st.info(f"üìà PER : {meilleur_avec_niches['optimisations']['per']:,.0f}‚Ç¨")
                
                if meilleur_avec_niches['optimisations']['madelin'] > 0:
                    st.info(f"üè• Madelin : {meilleur_avec_niches['optimisations']['madelin']:,.0f}‚Ç¨")
                
                if meilleur_avec_niches['optimisations']['girardin'] > 0:
                    st.error(f"üè≠ Girardin (D√âPENSE) : {meilleur_avec_niches['optimisations']['girardin']:,.0f}‚Ç¨")
                
                st.success(f"üí∞ √âconomies d'imp√¥t totales : {meilleur_avec_niches['optimisations']['economies_ir']:,.0f}‚Ç¨")
        
        with col2:
            st.subheader("üìä R√©partition du Revenu")
            
            # Graphique en camembert
            labels = ['Salaire Net', 'Dividendes Nets', 'Cotisations TNS', 'IR', 'IS Total', 'Flat Tax']
            values = [
                meilleur_avec_niches['remuneration_nette_apres_ir'],
                meilleur_avec_niches['dividendes_nets'],
                meilleur_avec_niches['cotisations_tns'],
                meilleur_avec_niches['ir_remuneration'],
                meilleur_avec_niches['is_sarl'] + meilleur_avec_niches['is_holding'],
                meilleur_avec_niches['flat_tax']
            ]
            
            fig_pie = go.Figure(data=[go.Pie(
                labels=labels,
                values=values,
                hole=0.4,
                textinfo='label+percent',
                textposition='auto'
            )])
            
            fig_pie.update_layout(
                title="R√©partition du r√©sultat initial",
                height=400
            )
            
            st.plotly_chart(fig_pie, use_container_width=True)
        
        # R√©sum√© d√©taill√© complet
        st.subheader("üìã R√©sum√© D√©taill√© de l'Optimisation")
        
        # Colonnes pour l'affichage du r√©sum√©
        col_resume1, col_resume2, col_resume3 = st.columns(3)
        
        with col_resume1:
            st.markdown("**üè¢ NIVEAU SARL**")
            st.info(f"""
            **R√©sultat initial :** {resultat_initial:,.0f}‚Ç¨  
            **Charges existantes :** {charges_existantes:,.0f}‚Ç¨  
            **R√©sultat avant r√©mun. :** {resultat_initial - charges_existantes:,.0f}‚Ç¨  
            
            **R√©mun√©ration brute :** {meilleur_avec_niches['remuneration_brute']:,.0f}‚Ç¨  
            **Cotisations TNS :** {meilleur_avec_niches['cotisations_tns']:,.0f}‚Ç¨  
            **R√©sultat apr√®s r√©mun. :** {meilleur_avec_niches['resultat_apres_remuneration']:,.0f}‚Ç¨  
            
            **IS SARL :** {meilleur_avec_niches['is_sarl']:,.0f}‚Ç¨  
            **Dividendes SARL :** {meilleur_avec_niches['dividendes_sarl']:,.0f}‚Ç¨
            """)
        
        with col_resume2:
            st.markdown("**üíº NIVEAU PERSONNEL**")
            st.success(f"""
            **R√©mun√©ration nette avant IR :** {meilleur_avec_niches['remuneration_nette_avant_ir']:,.0f}‚Ç¨  
            **Abattement frais pro (10%) :** {meilleur_avec_niches['abattement_frais_pro']:,.0f}‚Ç¨  
            **Revenu imposable initial :** {meilleur_avec_niches['revenu_imposable']:,.0f}‚Ç¨  
            
            **D√©ductions fiscales :**  
            ‚Ä¢ PER : {meilleur_avec_niches.get('per_deduction', 0):,.0f}‚Ç¨  
            ‚Ä¢ Madelin : {meilleur_avec_niches.get('madelin_deduction', 0):,.0f}‚Ç¨  
            **Revenu imposable final :** {meilleur_avec_niches.get('revenu_imposable_final', meilleur_avec_niches['revenu_imposable']):,.0f}‚Ç¨  
            
            **IR avant Girardin :** {meilleur_avec_niches.get('ir_avant_girardin', meilleur_avec_niches['ir_remuneration']):,.0f}‚Ç¨  
            **R√©duction Girardin :** {meilleur_avec_niches.get('reduction_girardin', 0):,.0f}‚Ç¨  
            **IR final :** {meilleur_avec_niches['ir_remuneration']:,.0f}‚Ç¨  
            
            **üí∞ Salaire net apr√®s IR :** {meilleur_avec_niches['remuneration_nette_apres_ir']:,.0f}‚Ç¨
            
            **üè≠ INVESTISSEMENT GIRARDIN :** -{meilleur_avec_niches['optimisations']['girardin']:,.0f}‚Ç¨
            """)
        
        with col_resume3:
            st.markdown("**üè† NIVEAU HOLDING + FINAL**")
            st.warning(f"""
            **Dividendes re√ßus :** {meilleur_avec_niches['dividendes_sarl']:,.0f}‚Ç¨  
            **Quote-part imposable (5%) :** {meilleur_avec_niches['quote_part_imposable']:,.0f}‚Ç¨  
            **IS Holding :** {meilleur_avec_niches['is_holding']:,.0f}‚Ç¨  
            **Dividendes dans holding :** {meilleur_avec_niches['dividendes_holding']:,.0f}‚Ç¨  
            
            **Flat tax (30%) :** {meilleur_avec_niches['flat_tax']:,.0f}‚Ç¨  
            **üíé Dividendes nets :** {meilleur_avec_niches['dividendes_nets']:,.0f}‚Ç¨  
            
            **üéØ TOTAL NET PER√áU :** {meilleur_avec_niches['total_net']:,.0f}‚Ç¨  
            **Taux pr√©l√®vement global :** {meilleur_avec_niches['taux_prelevement_global']:.1f}%
            """)
        
        # Tableau r√©capitulatif des √©conomies d'imp√¥ts si optimisations
        if any(meilleur_avec_niches['optimisations'][k] > 0 for k in ['per', 'madelin', 'girardin']):
            st.subheader("üí∞ D√©tail des √âconomies d'Imp√¥ts")
            
            col_eco1, col_eco2, col_eco3, col_eco4 = st.columns(4)
            
            with col_eco1:
                if meilleur_avec_niches['optimisations']['per'] > 0:
                    economie_per = meilleur_avec_niches.get('per_deduction', 0) * 0.30  # Estimation 30% d'√©conomie
                    st.metric("üìà PER", f"{meilleur_avec_niches['optimisations']['per']:,.0f}‚Ç¨", f"√âconomie: {economie_per:,.0f}‚Ç¨")
                else:
                    st.metric("üìà PER", "Non utilis√©", "0‚Ç¨")
            
            with col_eco2:
                if meilleur_avec_niches['optimisations']['madelin'] > 0:
                    economie_madelin = meilleur_avec_niches.get('madelin_deduction', 0) * 0.30  # Estimation 30% d'√©conomie
                    st.metric("üè• Madelin", f"{meilleur_avec_niches['optimisations']['madelin']:,.0f}‚Ç¨", f"√âconomie: {economie_madelin:,.0f}‚Ç¨")
                else:
                    st.metric("üè• Madelin", "Non utilis√©", "0‚Ç¨")
            
            with col_eco3:
                if meilleur_avec_niches['optimisations']['girardin'] > 0:
                    st.metric("üè≠ Girardin (D√âPENSE)", f"{meilleur_avec_niches['optimisations']['girardin']:,.0f}‚Ç¨", f"R√©duction: {meilleur_avec_niches.get('reduction_girardin', 0):,.0f}‚Ç¨")
                else:
                    st.metric("üè≠ Girardin", "Non utilis√©", "0‚Ç¨")
            
            with col_eco4:
                st.metric("üí∞ TOTAL √âCONOMIES", f"{meilleur_avec_niches['optimisations']['economies_ir']:,.0f}‚Ç¨", f"vs sans optim: +{meilleur_avec_niches['total_net'] - meilleur_classique['total_net']:,.0f}‚Ç¨")
        
        # Comparaison avec/sans optimisations
        st.subheader("‚öñÔ∏è Comparaison Avec/Sans Optimisations")
        col_comp1, col_comp2, col_comp3 = st.columns(3)
        
        with col_comp1:
            st.metric("üí∞ Sans optimisations", f"{meilleur_classique['total_net']:,.0f}‚Ç¨", "R√©f√©rence")
        
        with col_comp2:
            st.metric("üéØ Avec optimisations", f"{meilleur_avec_niches['total_net']:,.0f}‚Ç¨", f"+{meilleur_avec_niches['total_net'] - meilleur_classique['total_net']:,.0f}‚Ç¨")
        
        with col_comp3:
            amelioration = ((meilleur_avec_niches['total_net'] / meilleur_classique['total_net']) - 1) * 100
            st.metric("üìà Am√©lioration", f"+{amelioration:.1f}%", f"Gain: {meilleur_avec_niches['total_net'] - meilleur_classique['total_net']:,.0f}‚Ç¨")
        
        # Graphiques de comparaison
        st.subheader("üìà Analyses D√©taill√©es")
        
        tabs = st.tabs(["üéØ Comparaison Strat√©gies", "üìä Optimisation D√©taill√©e"])
        
        with tabs[0]:
            # Graphique de comparaison des strat√©gies
            fig_comp = create_comparison_chart(tous_scenarios_niches)
            st.plotly_chart(fig_comp, use_container_width=True)
            
            # Tableau de synth√®se
            st.subheader("üìã Synth√®se des Strat√©gies")
            create_strategy_table(tous_scenarios_niches)
        
        with tabs[1]:
            # Graphique d'optimisation classique
            fig_opt = create_optimization_chart(scenarios_classiques)
            st.plotly_chart(fig_opt, use_container_width=True)

def create_comparison_chart(tous_scenarios):
    """Cr√©e le graphique de comparaison des strat√©gies"""
    fig = sp.make_subplots(
        rows=2, cols=2,
        subplot_titles=('Comparaison des strat√©gies par r√©mun√©ration', 
                      'Gain net par strat√©gie',
                      '√âconomies d\'imp√¥t par strat√©gie', 
                      'Taux de pr√©l√®vement par strat√©gie'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    couleurs = ['blue', 'green', 'red', 'purple', 'orange', 'brown', 'pink', 'gray']
    
    # Donn√©es pour comparaison
    meilleurs_par_strategie = []
    noms_strategies = []
    
    for i, strategie in enumerate(tous_scenarios):
        scenarios = strategie['scenarios']
        optimisations = strategie['optimisations']
        
        # Utiliser tous les sc√©narios (dividendes n√©gatifs d√©sormais g√©r√©s correctement)
        scenarios_valides = scenarios
        
        # Nom de la strat√©gie
        nom = f"PER:{optimisations['per']:,} | Mad:{optimisations['madelin']:,} | Gir:{optimisations['girardin']:,}"
        noms_strategies.append(nom)
        meilleurs_par_strategie.append(strategie['meilleur'])
        
        remunerations = [s['remuneration_brute'] for s in scenarios_valides]
        totaux_nets = [s['total_net'] for s in scenarios_valides]
        taux_prelevements = [s['taux_prelevement_global'] for s in scenarios_valides]
        economies = [s['optimisations']['economies_ir'] for s in scenarios_valides]
        
        couleur = couleurs[i % len(couleurs)]
        
        # Graphique 1 : Courbes par r√©mun√©ration
        fig.add_trace(
            go.Scatter(
                x=remunerations, 
                y=totaux_nets,
                mode='lines',
                name=nom,
                line=dict(color=couleur, width=2),
                hovertemplate='<b>%{fullData.name}</b><br>' +
                             'R√©mun√©ration: %{x:,.0f}‚Ç¨<br>' +
                             'Total net: %{y:,.0f}‚Ç¨<extra></extra>',
                showlegend=(i < 4)  # Limiter la l√©gende
            ),
            row=1, col=1
        )
        
        # Graphique 3 : √âconomies d'imp√¥t
        fig.add_trace(
            go.Scatter(
                x=remunerations, 
                y=economies,
                mode='lines',
                name=f'√âconomies {nom}',
                line=dict(color=couleur, width=2, dash='dash'),
                hovertemplate='<b>%{fullData.name}</b><br>' +
                             'R√©mun√©ration: %{x:,.0f}‚Ç¨<br>' +
                             '√âconomies: %{y:,.0f}‚Ç¨<extra></extra>',
                showlegend=False
            ),
            row=2, col=1
        )
        
        # Graphique 4 : Taux de pr√©l√®vement
        fig.add_trace(
            go.Scatter(
                x=remunerations, 
                y=taux_prelevements,
                mode='lines',
                name=f'Taux {nom}',
                line=dict(color=couleur, width=2, dash='dot'),
                hovertemplate='<b>%{fullData.name}</b><br>' +
                             'R√©mun√©ration: %{x:,.0f}‚Ç¨<br>' +
                             'Taux: %{y:.1f}%<extra></extra>',
                showlegend=False
            ),
            row=2, col=2
        )
    
    # Graphique 2 : Barres comparatives des meilleurs gains
    gains_nets = [s['total_net'] for s in meilleurs_par_strategie]
    remunerations_opt = [s['remuneration_brute'] for s in meilleurs_par_strategie]
    economies_totales = [s['optimisations']['economies_ir'] for s in meilleurs_par_strategie]
    
    fig.add_trace(
        go.Bar(
            x=noms_strategies,
            y=gains_nets,
            name='Gain net optimal',
            marker_color=couleurs[:len(noms_strategies)],
            hovertemplate='<b>%{x}</b><br>' +
                         'Gain net optimal: %{y:,.0f}‚Ç¨<br>' +
                         'R√©mun√©ration optimale: %{customdata:,.0f}‚Ç¨<extra></extra>',
            customdata=remunerations_opt,
            showlegend=False
        ),
        row=1, col=2
    )
    
    # Mise en forme
    fig.update_layout(
        height=800,
        title_text="üéØ Comparaison des Strat√©gies d'Optimisation Fiscale",
        title_x=0.5,
        title_font_size=18,
        showlegend=True,
        hovermode='closest'
    )
    
    # Formatage des axes
    fig.update_xaxes(title_text="R√©mun√©ration de g√©rance (‚Ç¨)", tickformat=",", row=1, col=1)
    fig.update_xaxes(title_text="Strat√©gies", tickangle=45, row=1, col=2)
    fig.update_xaxes(title_text="R√©mun√©ration de g√©rance (‚Ç¨)", tickformat=",", row=2, col=1)
    fig.update_xaxes(title_text="R√©mun√©ration de g√©rance (‚Ç¨)", tickformat=",", row=2, col=2)
    
    fig.update_yaxes(title_text="Total net per√ßu (‚Ç¨)", tickformat=",", row=1, col=1)
    fig.update_yaxes(title_text="Gain net optimal (‚Ç¨)", tickformat=",", row=1, col=2)
    fig.update_yaxes(title_text="√âconomies d'imp√¥t (‚Ç¨)", tickformat=",", row=2, col=1)
    fig.update_yaxes(title_text="Taux de pr√©l√®vement (%)", row=2, col=2)
    
    return fig

def create_optimization_chart(scenarios):
    """Cr√©e le graphique d'optimisation d√©taill√©e"""
    # Utiliser tous les sc√©narios (dividendes n√©gatifs d√©sormais g√©r√©s correctement)
    scenarios_valides = scenarios
    
    remunerations = [s['remuneration_brute'] for s in scenarios_valides]
    totaux_nets = [s['total_net'] for s in scenarios_valides]
    taux_prelevements = [s['taux_prelevement_global'] for s in scenarios_valides]
    remunerations_nettes = [s['remuneration_nette_apres_ir'] for s in scenarios_valides]
    dividendes_nets = [s['dividendes_nets'] for s in scenarios_valides]
    cotisations = [s['cotisations_tns'] for s in scenarios_valides]
    ir = [s['ir_remuneration'] for s in scenarios_valides]
    is_sarl = [s['is_sarl'] for s in scenarios_valides]
    flat_tax = [s['flat_tax'] for s in scenarios_valides]
    
    # Cr√©er des sous-graphiques (2x2 - 1)
    fig = sp.make_subplots(
        rows=2, cols=2,
        subplot_titles=('Optimisation du revenu net total', 
                      'Taux de pr√©l√®vement global',
                      'Composition des pr√©l√®vements',
                      ''),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    # Graphique 1 : Total net avec optimum marqu√©
    if totaux_nets:  # V√©rifier qu'il y a des donn√©es
        max_idx = totaux_nets.index(max(totaux_nets))
    else:
        max_idx = 0
    
    fig.add_trace(
        go.Scatter(
            x=remunerations, 
            y=totaux_nets,
            mode='lines',
            name='Total net per√ßu',
            line=dict(color='blue', width=3),
            hovertemplate='<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                         '<b>Total net:</b> %{y:,.0f}‚Ç¨<extra></extra>'
        ),
        row=1, col=1
    )
    
    # Marquer l'optimum
    if totaux_nets:  # Seulement si on a des donn√©es
        fig.add_trace(
            go.Scatter(
                x=[remunerations[max_idx]], 
                y=[totaux_nets[max_idx]],
                mode='markers',
                marker=dict(color='red', size=15, symbol='star'),
                name='Optimum',
                hovertemplate='<b>üéØ OPTIMUM</b><br>' +
                             '<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                             '<b>Total net:</b> %{y:,.0f}‚Ç¨<extra></extra>'
            ),
            row=1, col=1
        )
    
    # Graphique 2 : Taux de pr√©l√®vement
    fig.add_trace(
        go.Scatter(
            x=remunerations, 
            y=taux_prelevements,
            mode='lines',
            name='Taux pr√©l√®vement',
            line=dict(color='red', width=3),
            hovertemplate='<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                         '<b>Taux pr√©l√®vement:</b> %{y:.1f}%<extra></extra>'
        ),
        row=1, col=2
    )
    
    # Graphique 3 : Composition des pr√©l√®vements (d√©plac√© en position 2,1)
    fig.add_trace(
        go.Scatter(
            x=remunerations, 
            y=cotisations,
            mode='lines',
            name='Cotisations TNS',
            fill='tonexty',
            line=dict(color='orange'),
            hovertemplate='<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                         '<b>Cotisations TNS:</b> %{y:,.0f}‚Ç¨<extra></extra>'
        ),
        row=2, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=remunerations, 
            y=[c + i for c, i in zip(cotisations, ir)],
            mode='lines',
            name='+ IR',
            fill='tonexty',
            line=dict(color='red'),
            hovertemplate='<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                         '<b>IR:</b> %{customdata:,.0f}‚Ç¨<extra></extra>',
            customdata=ir
        ),
        row=2, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=remunerations, 
            y=[c + i + is_val for c, i, is_val in zip(cotisations, ir, is_sarl)],
            mode='lines',
            name='+ IS',
            fill='tonexty',
            line=dict(color='darkred'),
            hovertemplate='<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                         '<b>IS SARL:</b> %{customdata:,.0f}‚Ç¨<extra></extra>',
            customdata=is_sarl
        ),
        row=2, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=remunerations, 
            y=[c + i + is_val + ft for c, i, is_val, ft in zip(cotisations, ir, is_sarl, flat_tax)],
            mode='lines',
            name='+ Flat tax',
            fill='tonexty',
            line=dict(color='darkblue'),
            hovertemplate='<b>R√©mun√©ration:</b> %{x:,.0f}‚Ç¨<br>' +
                         '<b>Flat tax:</b> %{customdata:,.0f}‚Ç¨<extra></extra>',
            customdata=flat_tax
        ),
        row=2, col=1
    )
    
    # Mise en forme
    fig.update_layout(
        height=800,  # Hauteur normale pour 3 graphiques
        title_text="Optimisation Fiscale SARL + Holding - Analyse Interactive",
        title_x=0.5,
        title_font_size=16,
        showlegend=True,
        hovermode='closest'
    )
    
    # Formatage des axes pour tous les graphiques
    for i in range(1, 3):  # 2 rang√©es
        for j in range(1, 3):  # 2 colonnes
            fig.update_xaxes(title_text="R√©mun√©ration de g√©rance (‚Ç¨)", row=i, col=j)
            fig.update_xaxes(tickformat=",", row=i, col=j)
    
    # Titre des axes Y
    fig.update_yaxes(title_text="Total net per√ßu (‚Ç¨)", tickformat=",", row=1, col=1)
    fig.update_yaxes(title_text="Taux (%)", row=1, col=2)
    fig.update_yaxes(title_text="Pr√©l√®vements cumul√©s (‚Ç¨)", tickformat=",", row=2, col=1)
    
    return fig

def create_strategy_table(tous_scenarios):
    """Cr√©e un tableau de synth√®se des strat√©gies"""
    data = []
    for i, strategie in enumerate(tous_scenarios):
        opt = strategie['optimisations']
        meilleur = strategie['meilleur']
        
        data.append({
            'Strat√©gie': f"PER: {opt['per']:,}‚Ç¨ | Madelin: {opt['madelin']:,}‚Ç¨ | Girardin: {opt['girardin']:,}‚Ç¨",
            'Gain Net (‚Ç¨)': f"{meilleur['total_net']:,.0f}",
            'R√©mun√©ration Optimale (‚Ç¨)': f"{meilleur['remuneration_brute']:,.0f}",
            '√âconomies IR (‚Ç¨)': f"{meilleur['optimisations']['economies_ir']:,.0f}",
            'Taux Pr√©l√®vement (%)': f"{meilleur['taux_prelevement_global']:.1f}"
        })
    
    import pandas as pd
    df = pd.DataFrame(data)
    
    # Identifier la meilleure strat√©gie
    gains = [float(d['Gain Net (‚Ç¨)'].replace(',', '')) for d in data]
    meilleur_idx = gains.index(max(gains))
    
    st.dataframe(
        df,
        use_container_width=True,
        hide_index=True
    )
    
    st.success(f"üèÜ **Meilleure strat√©gie :** {data[meilleur_idx]['Strat√©gie']}")
    st.info(f"üí∞ **Gain suppl√©mentaire vs sans optimisation :** +{max(gains) - min(gains):,.0f}‚Ç¨")

if __name__ == "__main__":
    main()