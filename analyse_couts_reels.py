#!/usr/bin/env python3
"""
Analyse comparative des co√ªts r√©els : R√©mun√©ration vs Dividendes
Affiche un tableau d√©taill√© pour comprendre pourquoi l'optimisation donne des r√©sultats "tout ou rien"
"""

from calculs import OptimisationRemunerationSARL
import pandas as pd

def analyser_couts_reels(resultat_avant_remuneration=250000, max_montant=200000, pas=5000, ca_variable=False):
    """
    Analyse les co√ªts r√©els de la r√©mun√©ration vs dividendes
    
    Args:
        resultat_avant_remuneration: R√©sultat de la soci√©t√© avant r√©mun√©ration
        max_montant: Montant maximum √† analyser
        pas: Pas d'analyse en euros
    """
    
    optimiseur = OptimisationRemunerationSARL(
        resultat_avant_remuneration=resultat_avant_remuneration,
        charges_existantes=0,
        parts_fiscales=1
    )
    
    print(f"üìä ANALYSE DES CO√õTS R√âELS - R√©sultat avant r√©mun√©ration: {resultat_avant_remuneration:,}‚Ç¨")
    print("=" * 120)
    
    # Collecte des donn√©es
    donnees = []
    
    for montant_net_cible in range(pas, max_montant + 1, pas):
        
        # === ADAPTATION DU CA SI DEMAND√â ===
        if ca_variable:
            resultat_adapte = montant_net_cible * 1.4
            optimiseur = OptimisationRemunerationSARL(
                resultat_avant_remuneration=resultat_adapte,
                charges_existantes=0,
                parts_fiscales=1
            )
        else:
            resultat_adapte = resultat_avant_remuneration
        
        # === CALCUL R√âMUN√âRATION ===
        # Pour obtenir montant_net_cible en r√©mun√©ration, il faut calculer le brut n√©cessaire
        remuneration_brute_estimee = montant_net_cible * 1.8  # Estimation initiale
        
        # Ajustement it√©ratif pour trouver le bon brut
        for tentative in range(10):
            scenario_rem = optimiseur.calculer_scenario(remuneration_brute_estimee)
            ecart = scenario_rem['remuneration_nette_apres_ir'] - montant_net_cible
            
            if abs(ecart) < 50:  # Pr√©cision de 50‚Ç¨
                break
                
            # Ajustement proportionnel
            if ecart > 0:
                remuneration_brute_estimee *= 0.98
            else:
                remuneration_brute_estimee *= 1.02
        
        # Co√ªt r√©el de la r√©mun√©ration pour l'entreprise
        if ca_variable:
            # En CA variable, le co√ªt = le CA n√©cessaire pour avoir le net cibl√©
            cout_remuneration = resultat_adapte  # = montant_net_cible * 1.4
            is_sur_reste = 0  # Pas d'IS, tout va en r√©mun√©ration
        else:
            # En CA fixe, co√ªt = charges salariales + IS sur r√©sultat r√©siduel
            resultat_apres_remuneration = resultat_adapte - scenario_rem['remuneration_brute'] - scenario_rem['cotisations_tns']
            if resultat_apres_remuneration > 0:
                is_sur_reste, _ = optimiseur.calculer_is(resultat_apres_remuneration)
            else:
                is_sur_reste = 0
            cout_remuneration = scenario_rem['remuneration_brute'] + scenario_rem['cotisations_tns'] + is_sur_reste
        
        # === CALCUL DIVIDENDES ===
        # Pour obtenir montant_net_cible en dividendes nets
        # Il faut remonter la cha√Æne : nets ‚Üí holding ‚Üí sarl ‚Üí avant IS
        
        # 1. Dividendes holding n√©cessaires (avant flat tax 30%)
        dividendes_holding_necessaires = montant_net_cible / 0.70
        
        # 2. Dividendes SARL n√©cessaires (avant IS holding 1.25%)
        taux_is_holding_effectif = 0.05 * 0.25  # 1.25%
        dividendes_sarl_necessaires = dividendes_holding_necessaires / (1 - taux_is_holding_effectif)
        
        # 3. R√©sultat avant IS SARL n√©cessaire
        # Calcul IS selon tranches
        if dividendes_sarl_necessaires <= 42500:
            is_sarl_necessaire = dividendes_sarl_necessaires * 0.15
        else:
            is_sarl_necessaire = 42500 * 0.15 + (dividendes_sarl_necessaires - 42500) * 0.25
        
        resultat_avant_is_necessaire = dividendes_sarl_necessaires + is_sarl_necessaire
        
        # Co√ªt r√©el des dividendes = r√©sultat avant IS n√©cessaire
        cout_dividendes = resultat_avant_is_necessaire
        
        # === CALCULS DE V√âRIFICATION ===
        # V√©rification avec un sc√©nario r√©el (0‚Ç¨ de r√©mun√©ration, tout en dividendes)
        if resultat_avant_is_necessaire <= resultat_adapte:
            scenario_div = optimiseur.calculer_scenario(0)
            
            # Calculer quel pourcentage du r√©sultat on utilise
            pourcentage_utilise = resultat_avant_is_necessaire / resultat_adapte
            
            dividendes_nets_reels = scenario_div['dividendes_nets'] * pourcentage_utilise
            is_reel = scenario_div['is_sarl'] * pourcentage_utilise
            flat_tax_reelle = scenario_div['flat_tax'] * pourcentage_utilise
        else:
            dividendes_nets_reels = 0
            is_reel = 0
            flat_tax_reelle = 0
        
        # === CALCUL DES EFFICACIT√âS ===
        efficacite_remuneration = montant_net_cible / cout_remuneration if cout_remuneration > 0 else 0
        efficacite_dividendes = montant_net_cible / cout_dividendes if cout_dividendes > 0 else 0
        
        # Diff√©rence de co√ªt
        diff_cout = cout_dividendes - cout_remuneration
        meilleur = "REMUNERATION" if cout_remuneration < cout_dividendes else "DIVIDENDES"
        
        # IR r√©el pay√© pour ce niveau de net
        ir_reel = scenario_rem['ir_remuneration']
        
        donnees.append({
            'montant_net': montant_net_cible,
            'ir_reel': ir_reel,
            'cout_remuneration': cout_remuneration,
            'cout_dividendes': cout_dividendes,
            'diff_cout': diff_cout,
            'efficacite_rem': efficacite_remuneration,
            'efficacite_div': efficacite_dividendes,
            'meilleur': meilleur,
            'rem_brute': scenario_rem['remuneration_brute'],
            'cotisations': scenario_rem['cotisations_tns'],
            'ir': scenario_rem['ir_remuneration'],
            'is_sur_reste': is_sur_reste,
            'is_necessaire': is_sarl_necessaire,
            'flat_tax': flat_tax_reelle,
            'ca_adapte': resultat_adapte
        })
    
    # === AFFICHAGE DU TABLEAU ===
    df = pd.DataFrame(donnees)
    
    if ca_variable:
        print(f"{'Net Cibl√©':>9} {'IR r√©el':>8} {'CA adapt':>9} {'Co√ªt R√©m':>9} {'Co√ªt Div':>9} {'Diff':>7} {'Eff R/D':>10} {'Meilleur':>9}")
        print(f"{'(‚Ç¨)':>9} {'(‚Ç¨)':>8} {'(‚Ç¨)':>9} {'(‚Ç¨)':>9} {'(‚Ç¨)':>9} {'(‚Ç¨)':>7} {'':>10} {'':>9}")
        print("-" * 81)
    else:
        print(f"{'Net Cibl√©':>9} {'IR r√©el':>8} {'Co√ªt R√©mun':>11} {'Co√ªt Divid':>11} {'Diff√©rence':>9} {'Efficacit√©':>15} {'Meilleur':>10}")
        print(f"{'(‚Ç¨)':>9} {'(‚Ç¨)':>8} {'(‚Ç¨)':>11} {'(‚Ç¨)':>11} {'(‚Ç¨)':>9} {'R√©m/Div':>15} {'':>10}")
        print("-" * 89)
    
    for _, row in df.iterrows():
        if ca_variable:
            print(f"{row['montant_net']:>9,} "
                  f"{row['ir_reel']:>8,.0f} "
                  f"{row['ca_adapte']:>9,.0f} "
                  f"{row['cout_remuneration']:>9,.0f} "
                  f"{row['cout_dividendes']:>9,.0f} "
                  f"{row['diff_cout']:>7,.0f} "
                  f"{row['efficacite_rem']:.2f}/{row['efficacite_div']:.2f} "
                  f"{row['meilleur']:>9}")
        else:
            print(f"{row['montant_net']:>9,} "
                  f"{row['ir_reel']:>8,.0f} "
                  f"{row['cout_remuneration']:>11,.0f} "
                  f"{row['cout_dividendes']:>11,.0f} "
                  f"{row['diff_cout']:>9,.0f} "
                  f"{row['efficacite_rem']:.2f}/{row['efficacite_div']:.2f} "
                  f"{row['meilleur']:>10}")
    
    if ca_variable:
        print("-" * 81)
    else:
        print("-" * 89)
    
    # === ANALYSE D√âTAILL√âE ===
    print("\nüìà ANALYSE D√âTAILL√âE DES CO√õTS")
    print("=" * 60)
    
    # Point d'√©quilibre
    equilibres = df[abs(df['diff_cout']) < 500]  # Diff√©rence < 500‚Ç¨
    if not equilibres.empty:
        print(f"üéØ Points d'√©quilibre (diff√©rence < 500‚Ç¨):")
        for _, row in equilibres.iterrows():
            print(f"   - {row['montant_net']:,}‚Ç¨ net ‚Üí Diff√©rence: {row['diff_cout']:,.0f}‚Ç¨")
    
    # Zones de domination
    zones_rem = df[df['meilleur'] == 'REMUNERATION']
    zones_div = df[df['meilleur'] == 'DIVIDENDES']
    
    if not zones_rem.empty:
        print(f"\nüíº R√©mun√©ration plus efficace pour:")
        print(f"   - {zones_rem['montant_net'].min():,}‚Ç¨ √† {zones_rem['montant_net'].max():,}‚Ç¨ net")
        print(f"   - √âconomie moyenne: {zones_rem['diff_cout'].mean():,.0f}‚Ç¨")
    
    if not zones_div.empty:
        print(f"\nüí∞ Dividendes plus efficaces pour:")
        print(f"   - {zones_div['montant_net'].min():,}‚Ç¨ √† {zones_div['montant_net'].max():,}‚Ç¨ net")
        print(f"   - √âconomie moyenne: {-zones_div['diff_cout'].mean():,.0f}‚Ç¨")
    
    # === EXPLICATION DES CO√õTS ===
    print(f"\nüîç D√âTAIL DES CO√õTS MARGINAUX")
    print("=" * 60)
    
    # Prendre quelques exemples
    exemples = [25000, 50000, 100000, 150000]
    
    for montant in exemples:
        if montant <= max_montant:
            row = df[df['montant_net'] == montant].iloc[0]
            
            print(f"\nüí° Pour {montant:,}‚Ç¨ nets :")
            print(f"   R√âMUN√âRATION ‚Üí Co√ªt total: {row['cout_remuneration']:,.0f}‚Ç¨")
            print(f"   ‚îú‚îÄ Brut n√©cessaire: {row['rem_brute']:,.0f}‚Ç¨")
            print(f"   ‚îú‚îÄ Cotisations TNS: {row['cotisations']:,.0f}‚Ç¨")
            print(f"   ‚îú‚îÄ IS sur reste: {row['is_sur_reste']:,.0f}‚Ç¨")
            print(f"   ‚îî‚îÄ IR (pay√© par salari√©): {row['ir']:,.0f}‚Ç¨")
            print(f"   ")
            print(f"   DIVIDENDES ‚Üí Co√ªt total: {row['cout_dividendes']:,.0f}‚Ç¨")
            print(f"   ‚îú‚îÄ IS SARL: {row['is_necessaire']:,.0f}‚Ç¨")
            print(f"   ‚îú‚îÄ IS Holding: {row['is_necessaire'] * 0.0125:.0f}‚Ç¨")
            print(f"   ‚îî‚îÄ Flat tax (pay√©e par actionnaire): {row['cout_dividendes'] * 0.3 * 0.9875:.0f}‚Ç¨")
            print(f"   ")
            print(f"   ‚öñÔ∏è  {row['meilleur']} plus efficace (√©cart: {abs(row['diff_cout']):,.0f}‚Ç¨)")
    
    return df

def analyser_taux_marginaux():
    """Analyse les taux marginaux pour comprendre les seuils"""
    print(f"\nüìä ANALYSE DES TAUX MARGINAUX")
    print("=" * 60)
    
    # Taux marginaux r√©mun√©ration
    print("üíº R√âMUN√âRATION :")
    print("   ‚îú‚îÄ Cotisations TNS: ~41% (variable selon plafonds)")
    print("   ‚îú‚îÄ IR marginal: 0% ‚Üí 11% ‚Üí 30% ‚Üí 41% ‚Üí 45%")
    print("   ‚îî‚îÄ Taux marginal total: 41% √† 86%")
    
    print("\nüí∞ DIVIDENDES :")
    print("   ‚îú‚îÄ IS SARL: 15% (‚â§42.5k‚Ç¨) puis 25%")
    print("   ‚îú‚îÄ IS Holding: 1.25% (5% √ó 25%)")
    print("   ‚îú‚îÄ Flat tax: 30%")
    print("   ‚îî‚îÄ Taux marginal total: ~41% √† 47%")
    
    print("\nüéØ EXPLICATION du 'tout ou rien' :")
    print("   ‚Üí Taux marginaux proches cr√©ent des √©quilibres instables")
    print("   ‚Üí Petites variations font basculer l'optimum")
    print("   ‚Üí D'o√π les allocations extr√™mes dans l'optimisation")

if __name__ == "__main__":
    print("üöÄ LANCEMENT DE L'ANALYSE DES CO√õTS R√âELS")
    print("=" * 80)
    
    # Configuration
    resultat = 250000  # ‚Ç¨
    max_analyse = 150000  # ‚Ç¨
    pas_analyse = 5000  # ‚Ç¨
    
    print("\nüìä ANALYSE 1: CA FIXE √† 250k‚Ç¨")
    print("=" * 50)
    df_resultats_fixe = analyser_couts_reels(resultat, max_analyse, pas_analyse, ca_variable=False)
    
    print("\nüìä ANALYSE 2: CA VARIABLE (Net cibl√© √ó 1.4)")
    print("=" * 50)
    df_resultats_variable = analyser_couts_reels(resultat, max_analyse, pas_analyse, ca_variable=True)
    
    # Analyse des taux marginaux
    analyser_taux_marginaux()
    
    print(f"\n‚úÖ Analyses termin√©es.")
    print(f"üìà Donn√©es CA fixe: df_resultats_fixe")
    print(f"üìà Donn√©es CA variable: df_resultats_variable")